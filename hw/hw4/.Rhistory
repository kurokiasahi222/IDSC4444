knitr::opts_chunk$set(echo = TRUE)
credit_data <- read.csv('credit.csv')
table(credit_data)
table(credit_data$DEFAULT)
prop <- sum(credit_data)
count(credit_data)
i <- credit_data$DEFAULT
i <- sum(credit_data$DEFAULT)
credit_table <- table(credit_data$DEFAULT)
credit_table
count(credit_table)
length(credit_table)
credit_table
credit_table["No"]
credit_table
credit_table["NO"]
sum(credit_table["NO"])
sum(credit_table)
credit_table
5222 + 1258
credit_data <- read.csv('credit.csv')
credit_table <- table(credit_data$DEFAULT)
credit_table
prob <- sum(credit_table["YES"]) / sum(credit_table)
prob
?ggplot2()
library(ggplot2)
ggplot(data = credit_data, aes(x = DEFAULT, y = AGE, group = DEFUALT )) +
geom_hist() +
ggtitle("Histogram of age by default")
ggplot(data = credit_data, aes(x = DEFAULT, y = AGE, group = DEFUALT )) +
geom_histogram() +
ggtitle("Histogram of age by default")
ggplot(data = credit_data, aes(x = DEFAULT, y = AGE, group = DEFUALT )) +
geom_histogram() +
ggtitle("Histogram of age by default")
ggplot(data = credit_data, aes(x = DEFAULT, y = AGE, group = DEFAULT )) +
geom_histogram() +
ggtitle("Histogram of age by default")
ggplot(data = credit_data, aes(x = DEFAULT, group = DEFAULT )) +
geom_histogram() +
ggtitle("Histogram of age by default")
ggplot(data = credit_data, aes(x = DEFAULT, count = DEFAULT )) +
geom_histogram() +
ggtitle("Histogram of age by default")
ggplot(data = credit_data, aes(x = DEFAULT, fill = DEFAULT )) +
geom_histogram() +
ggtitle("Histogram of age by default")
ggplot(data = credit_data, aes(x = DEFAULT, fill = DEFAULT )) +
geom_histogram() +
ggtitle("Histogram of age by default")
ggplot(data = credit_data, aes(x = age, fill = DEFAULT )) +
geom_histogram() +
ggtitle("Histogram of age by default")
ggplot(data = credit_data, aes(x = AGE, fill = DEFAULT )) +
geom_histogram() +
ggtitle("Histogram of age by default")
ggplot(data = credit_data, aes(x = AGE, group = DEFAULT )) +
geom_histogram() +
ggtitle("Histogram of age by default")
ggplot(data = credit_data, aes(x = AGE, group = DEFAULT )) +
geom_histogram() +
ggtitle("Histogram of age by default")
ggplot(data = credit_data, aes(x = AGE, fill = DEFAULT )) +
geom_histogram() +
ggtitle("Histogram of age by default")
credit_table
prob <- sum(credit_table["YES"]) / sum(credit_table)
prob
ggplot(data = credit_data, aes(x = AGE, fill = DEFAULT )) +
geom_histogram(alpha = 1) +
ggtitle("Histogram of age by default") +
labs(x = "Age", y = "Count")
View(credit_data)
View(credit_data)
ggplot(data = credit_data, aes(x = DEFAULT, y = LIMIT_BAL / 1000, group = DEFAULT)) +
geom_boxplot(outlier.colour="orange", outlier.shape=2, outlier.size=3) +
ggtitle("Boxplot of Credit limit by Default") +
labs(x = "Credit Limit", y = "Default")
ggplot(data = credit_data, aes(x = DEFAULT, y = LIMIT_BAL / 1000, group = DEFAULT)) +
geom_boxplot(outlier.colour="orange", outlier.shape=2, outlier.size=3) +
ggtitle("Boxplot of Credit limit by Default") +
labs(x = "Default", y ="Credit Limit" )
library(dplyr)
data % > %
group_by(DEFAULT) % > %
summarize(mean = mean(LIMIT_BAL / 1000),
median = median(LIMIT_BAL / 1000))
library(dplyr)
data % > %
group_by(DEFAULT) % > %
summarize(mean = mean(LIMIT_BAL / 1000),
median = median(LIMIT_BAL / 1000))
data %>%
group_by(DEFAULT) % > %
summarize(mean = mean(LIMIT_BAL / 1000),
median = median(LIMIT_BAL / 1000))
data %>%
group_by(DEFAULT) %>% summarize(mean = mean(LIMIT_BAL/1000),
median = median(LIMIT_BAL/1000))
data %>%
group_by(DEFAULT) %>% summarize(mean = mean(LIMIT_BAL/1000),
median = median(LIMIT_BAL/1000))
data %>%
group_by(DEFAULT) %>%
summarize(mean = mean(LIMIT_BAL/1000),
median = median(LIMIT_BAL/1000))
data %>%
group_by(DEFAULT) %>%
summarize(mean = mean(LIMIT_BAL/1000),
median = median(LIMIT_BAL/1000))
credit_data %>%
group_by(DEFAULT) %>%
summarize(mean = mean(LIMIT_BAL / 1000),
median = median(LIMIT_BAL / 1000))
library("caret")
library("e1071")
library("rpart")
library("rpart.plot")
train_rows <- createDataPartition(y = credit_data$DEFAULT, p =0.8, list = FALSE)
#Create the training data using the randomly picked observations from before
data_train <- credit_data[train_rows,]
#Create the test data, by taking all the remaining observations that
#were not included in data_train
data_test <- credit_data[-train_rows, ]
View(data_train)
View(data_test)
View(data_train)
data_train_stand <- data_train
data_test_stand <- data_test
#load the package standardize
library(standardize)
#We apply the function scale to the data_train_stand and data_test_stand
data_train_stand[,1:16] <- apply(data_train_stand[,1:16], MARGIN = 2, FUN = scale)
data_test_stand[,1:16] <- apply(data_test_stand[,1:16], MARGIN = 2, FUN = scale)
View(data_train_stand)
grid = expand.grid(k = c(5,10,20,30,40))
fitKNN <- train(data= data_train_stand, method = "knn", DEFAULT.~.,
trControl = trainControl(search="grid"), tuneGrid=grid)
grid = expand.grid(k = c(5,10,20,30,40))
fitKNN <- train(data= data_train_stand, method = "knn", DEFAULT~.,
trControl = trainControl(search="grid"), tuneGrid=grid)
fitKNN
plot(fitKNN, ylab = "Accuracy")
knn_predictions <- predict(fitKNN, data_test_stand)
confusionMatrix(knn_predictions, as.factor(data_test_stand$DEFAULT), mode = "prec_recall", positive = "YES")
995 / (995 + 198)
53 / (53 + 49)
confusionMatrix(knn_predictions, as.factor(data_test_stand$DEFAULT), mode = "prec_recall", positive = "NO")
credit_table
fitDT <- train(data = data_train, method = "rpart", DEFAULT~.)
fitDT$finalModel
#See the decision rules
rpart.rules(fitDT$finalModel)
#Get the plot of the tree
rpart.plot(fitDT$finalModel)
rpart.plot(fitDT$finalModel)
confusionMatrix(knn_predictions, as.factor(data_test_stand$DEFAULT), positive = "YES")
DT_predictions <- predict(fitDT$finalModel, newdata = data_test, type = "class")
confusionMatrix(DT_predictions, as.factor(data_test_stand$DEFAULT), positive = "YES")
confusionMatrix(DT_predictions, as.factor(data_test$DEFAULT), positive = "YES")
confusionMatrix(DT_predictions, as.factor(data_test$DEFAULT), positive = "YES")
confusionMatrix(DT_predictions, as.factor(data_test$DEFAULT), mode = "prec_recall", positive = "True.")
confusionMatrix(DT_predictions, as.factor(data_test$DEFAULT), mode = "prec_recall", positive = "YES")
confusionMatrix(DT_predictions, as.factor(data_test$DEFAULT), mode = "prec_recall", positive = "NO")
DT_prob<- as.data.frame(predict(fitDT$finalModel, newdata = data_test, type = "prob"))
View(DT_prob)
DT_prob$pred_class <- ifelse(DT_prob$NO > 0.75, "NO", "YES")
DT_prob$pred_class<- as.factor(DT_prob$pred_class)
View(DT_prob)
DT_prob$pred_class <- ifelse(DT_prob$NO > 0.75, "NO", "YES")
DT_prob$pred_class<- as.factor(DT_prob$pred_class)
confusionMatrix(DT_prob$pred_class, as.factor(data_test$DEFAULT), positive = "YES")
DEFAULT = YES
A. Recall: 0.11554
B. Precision: 0.47541
C. F-1 score: 0.18590
DEFAULT = NO
A. Recall: 0.96935
B. Precision: 0.82010
C. F-1 score:  0.8885 \
confusionMatrix(DT_prob$pred_class, as.factor(data_test$Churn.),mode = "prec_recall", positive = "True.")
confusionMatrix(DT_prob$pred_class, as.factor(data_test$DEFAULT), mode = "prec_recall", positive = "YES")
confusionMatrix(DT_prob$pred_class, as.factor(data_test$DEFAULT), mode = "prec_recall", positive = "NO")
knitr::opts_chunk$set(echo = TRUE)
### load required packages
library("caret")
library("e1071")
library("rpart")
library("rpart.plot")
credit_data <- read.csv('credit.csv')
credit_table <- table(credit_data$DEFAULT)
credit_table
prob <- sum(credit_table["YES"]) / sum(credit_table)
prob
library(ggplot2)
ggplot(data = credit_data, aes(x = AGE, fill = DEFAULT )) +
geom_histogram(alpha = 1) +
ggtitle("Histogram of age by default") +
labs(x = "Age", y = "Count")
ggplot(data = credit_data, aes(x = DEFAULT, y = LIMIT_BAL / 1000, group = DEFAULT)) +
geom_boxplot(outlier.colour="orange", outlier.shape=2, outlier.size=3) +
ggtitle("Boxplot of Credit limit by Default") +
labs(x = "Default", y ="Credit Limit" )
library(dplyr)
credit_data %>%
group_by(DEFAULT) %>%
summarize(mean = mean(LIMIT_BAL / 1000),
median = median(LIMIT_BAL / 1000))
train_rows <- createDataPartition(y = credit_data$DEFAULT, p =0.8, list = FALSE)
#Create the training data using the randomly picked observations from before
data_train <- credit_data[train_rows,]
#Create the test data, by taking all the remaining observations that
#were not included in data_train
data_test <- credit_data[-train_rows, ]
data_train_stand <- data_train
data_test_stand <- data_test
#load the package standardize
library(standardize)
#We apply the function scale to the data_train_stand and data_test_stand
data_train_stand[,1:16] <- apply(data_train_stand[,1:16], MARGIN = 2, FUN = scale)
data_test_stand[,1:16] <- apply(data_test_stand[,1:16], MARGIN = 2, FUN = scale)
grid = expand.grid(k = c(5,10,20,30,40))
fitKNN <- train(data= data_train_stand, method = "knn", DEFAULT~.,
trControl = trainControl(search="grid"), tuneGrid=grid)
fitKNN
plot(fitKNN, ylab = "Accuracy")
knn_predictions <- predict(fitKNN, data_test_stand)
confusionMatrix(knn_predictions, as.factor(data_test_stand$DEFAULT), positive = "YES")
